#!/usr/bin/env python2.7

import roslib; roslib.load_manifest('urdfdom_py')
import rospy
from urdf_parser_py.urdf import URDF
import tf
import tf2_ros
import geometry_msgs.msg

class publishFixedTransforms:

   def __init__(self):
      self.robot = URDF.from_parameter_server()
      self.br = tf2_ros.StaticTransformBroadcaster()
      self.rate = rospy.Rate(10)
      for joint in self.robot.joints:
        if joint.limit and joint.limit.upper == joint.limit.lower:
          self.sendTransform(joint)
          self.rate.sleep()

   def sendTransform(self, joint):

      static_transformStamped = geometry_msgs.msg.TransformStamped()

      static_transformStamped.header.stamp = rospy.Time.now()
      static_transformStamped.header.frame_id = joint.parent
      static_transformStamped.child_frame_id = joint.child

      static_transformStamped.transform.translation.x = joint.origin.xyz[0]
      static_transformStamped.transform.translation.y = joint.origin.xyz[1]
      static_transformStamped.transform.translation.z = joint.origin.xyz[2]
      quat = tf.transformations.quaternion_from_euler(joint.origin.rpy[0], joint.origin.rpy[1], joint.origin.rpy[2], 'sxyz')
      static_transformStamped.transform.rotation.x = quat[0]
      static_transformStamped.transform.rotation.y = quat[1]
      static_transformStamped.transform.rotation.z = quat[2]
      static_transformStamped.transform.rotation.w = quat[3]
      self.br.sendTransform(static_transformStamped)

if __name__ == '__main__':

  rospy.init_node('static_transform')

  pb = publishFixedTransforms()


